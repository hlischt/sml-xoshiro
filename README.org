* sml-xoshiro
This module implements the [[https://prng.di.unimi.it/][xoshiro256]] family of 64-bit pseudorandom number generators in Standard ML. The following structures are available:

- =Xoshiro256ss=, implementing [[https://prng.di.unimi.it/xoshiro256starstar.c][xoshiro256**]]
- =Xoshiro256pp=, implementing [[https://prng.di.unimi.it/xoshiro256plusplus.c][xoshiro256++]]
- =Xoshiro256p=, implementing [[https://prng.di.unimi.it/xoshiro256plus.c][xoshiro256+]]

This module was tested with Standard ML of New Jersey (v110.79) and MLton (20210117). Other implementation may work as long as they support the [[https://smlfamily.github.io/Basis/word.html][Word64 structure]].

** Design
The PRNGs follow this signature:

#+BEGIN_SRC sml
type intU = Word64.word
type seed
val maxUInt: intU
val generateSeed: unit -> seed
val seedFromNumber: intU -> seed
val randomNumber: seed -> intU * seed
val randomToN: intU * seed -> intU * seed
#+END_SRC

Being a functional language, Standard ML heavily discourages the use of a global state, so this library revolves around passing a state value, i.e. the seed. First, you have to iniitialize the state, either by passing an arbitrary number to =seedFromNumber= or by automatically getting one with the =generateSeed= function, which uses the current time in nanoseconds as seed. Once you have a state value, you pass it to =randomNumber= to get a random number and a new seed, which you can use to call the function again. =randomToN= works similarly, but you have to pass a number n alongside the state, and the random number it returns is on the range [0, n-1].
